version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3.1

jobs:
  apply_grafana_dashboard:
    working_directory: ~/circle/
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run:
          name: EKS_CLUSTER_CERT to disk
          command: 'echo -n "$EKS_CLUSTER_CERT" | sed "s/ //g" | base64 -d > ca.crt'
      - run:
          name: kubectl configure cluster
          command: 'kubectl config set-cluster "$EKS_CLUSTER" --certificate-authority="./ca.crt" --server="$EKS_SERVER"'
      - run:
          name: kubectl configure credentials
          command: 'kubectl config set-credentials "circleci" --token="$(echo $EKS_TOKEN | base64 -d)"'
      - run:
          name: kubectl configure context
          command: 'kubectl config set-context "circleci" --cluster="$EKS_CLUSTER" --user="circleci" --namespace="formbuilder-monitoring"'
      - run:
          name: kubectl use circleci context
          command: 'kubectl config use-context "circleci"'
      - run:
          name: apply grafana dashboard
          command: 'kubectl apply -f fb_grafana_dashboard_config_map.yml'

  apply_prometheus_rules:
    working_directory: ~/circle/
    docker:
      - image: 'cimg/ruby:3.2.2'
    parameters:
      destination:
        type: string
      platform_env:
        type: string
      deployment_env:
        type: string
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: &configure_cluster
          name: kubectl configure cluster
          command: |
            echo -n "$EKS_CLUSTER_CERT" | base64 -d > ca.crt
            kubectl config set-cluster "$EKS_CLUSTER_NAME" --certificate-authority=./ca.crt --server="https://$EKS_CLUSTER_NAME"
      - run:
          name: kubectl configure context
          command: |
            scripts/circleci_configure_context_eks.sh << parameters.destination >> << parameters.platform_env >> << parameters.deployment_env >>
      - run:
          name: kubectl apply rules
          command: |
            ruby scripts/deploy_alerting.rb << parameters.destination >> << parameters.platform_env >> << parameters.deployment_env >>

  apply_hmcts_prometheus_rules:
    working_directory: ~/circle/
    docker:
      - image: 'cimg/ruby:3.2.2'
    parameters:
      destination:
        type: string
      platform_env:
        type: string
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: *configure_cluster
      - run:
          name: kubectl configure context
          command: |
            scripts/circleci_configure_context_eks.sh << parameters.destination >> << parameters.platform_env >>
      - run:
          name: apply apply rules
          command: |
            ruby scripts/deploy_alerting.rb << parameters.destination >> << parameters.platform_env >>

workflows:
  create_monitoring:
    jobs:
      - apply_grafana_dashboard:
          filters:
            branches:
              only:
                - main
                - update-circle-config

      - apply_prometheus_rules:
          name: "apply_prometheus_rules_<< matrix.destination >>_<< matrix.platform_env >>_<< matrix.deployment_env >>"
          matrix:
            parameters:
              destination: [platform, services]
              platform_env: [test, live]
              deployment_env: [dev, production]
          context:
            - moj-forms
            - moj-forms-<< matrix.destination >>-apps
          filters:
            branches:
              only:
                - main
                - update-circle-config

#      - apply_hmcts_prometheus_rules:
#          matrix:
#            parameters:
#              destination: [hmcts_complaints_adapter]
#              platform_env: [staging, production]
#          filters:
#            branches:
#              only:
#                - main
#                - update-circle-config

version: 2.1
jobs:
  apply_grafana_dashboard:
    working_directory: ~/circle/
    docker: &ecr_base_image
      - image: $AWS_ECR_ACCOUNT_URL
        aws_auth:
            aws_access_key_id: $AWS_ACCESS_KEY_ID
            aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - run: &cert_authority
          name: EKS_CLUSTER_CERT to disk
          command: 'echo -n "$EKS_CLUSTER_CERT" | base64 -d > /root/circle/.kube_certificate_authority'
      - run: &configure_cluster
          name: kubectl configure cluster
          command: 'kubectl config set-cluster "$EKS_CLUSTER" --certificate-authority="/root/circle/.kube_certificate_authority" --server="$EKS_SERVER"'
      - run: &credentials
          name: kubectl configure credentials
          command: 'kubectl config set-credentials "circleci" --token="$(echo $EKS_TOKEN | base64 -d)"'
      - run: &context
          name: kubectl configure context
          command: 'kubectl config set-context "circleci" --cluster="$EKS_CLUSTER" --user="circleci" --namespace="formbuilder-monitoring"'
      - run: &circle_context
          name: kubectl use circleci context
          command: 'kubectl config use-context "circleci"'
      - run:
          name: deploy grafana dashboard
          command: 'kubectl apply -f fb_grafana_dashboard_config_map.yml'

  apply_prometheus_rules:
    working_directory: ~/circle/
    docker: *ecr_base_image
    parameters:
      destination:
        type: string
      platform_env:
        type: string
      deployment_env:
        type: string
    steps:
      - checkout
      - run: *cert_authority
      - run: *configure_cluster
      - run: *credentials
      - run: *context
      - run: *circle_context
      - run:
          name: kubectl configure
          command: |
            scripts/circleci_configure_context_eks.sh << parameters.destination >> << parameters.platform_env >> << parameters.deployment_env >>
      - run:
          name: apply rules
          command: |
            ruby scripts/deploy_alerting.rb << parameters.destination >> << parameters.platform_env >> << parameters.deployment_env >>

  apply_hmcts_prometheus_rules:
    working_directory: ~/circle/
    docker: *ecr_base_image
    parameters:
      destination:
        type: string
      platform_env:
        type: string
    steps:
      - checkout
      - run: *cert_authority
      - run: *configure_cluster
      - run: *credentials
      - run: *context
      - run: *circle_context
      - run:
          name: kubectl configure hmcts_complaints_adapter
          command: |
            scripts/circleci_configure_context_eks.sh << parameters.destination >> << parameters.platform_env >>
      - run:
          name: apply hmcts_complaints_adapter rules
          command: |
            ruby scripts/deploy_alerting.rb << parameters.destination >> << parameters.platform_env >>

workflows:
  create_monitoring:
    jobs:
      - apply_grafana_dashboard:
          filters:
            branches:
              only:
                - main
                - update-circle-config
      - apply_prometheus_rules:
          matrix:
            parameters:
              destination: [platform, services]
              platform_env: [test, live]
              deployment_env: [dev, production]
          filters:
            branches:
              only:
                - main
                - update-circle-config
      - apply_hmcts_prometheus_rules:
          matrix:
            parameters:
              destination: [hmcts_complaints_adapter]
              platform_env: [staging, production]
          filters:
            branches:
              only:
                - main
                - update-circle-config
